  //const int sensorPin = 5;  // Pino digital onde o sensor de inclinação está conectado
#include <BluetoothSerial.h>
#include <ESP32Encoder.h>
#include <Ultrasonic.h>

#define sensorVelocidade 
BluetoothSerial ESP_BT;

int Motor1_Direita = 2;
int Motor1_Esquerda = 15;
int Motor2_Direita = 16;
int Motor2_Esquerda = 4;
int velocidadeInicial = 75;
int velocidadeAtual = 0;

ESP32Encoder encoder;
long lastCount = 0;

#define TRIGGER_PIN 14
#define ECHO_PIN 12
Ultrasonic ultrasonic(TRIGGER_PIN, ECHO_PIN);
int identificou = 0;



void setup() {
 // pinMode(sensorPin, INPUT);
  pinMode(Motor1_Direita, OUTPUT);
  pinMode(Motor1_Esquerda, OUTPUT);
  pinMode(Motor2_Direita, OUTPUT);
  pinMode(Motor2_Esquerda, OUTPUT);
  ESP_BT.begin("ESP32_BT LEO");
  Serial.println("Bluetooth Device is Ready to Pair");

  encoder.attachFullQuad(sensorVelocidade);

  Serial.begin(115200); // Inicializa a comunicação Serial
  Serial.println("Digite o comando");
}

void Iniciar() {
  analogWrite(Motor1_Esquerda, velocidadeInicial);
  analogWrite(Motor1_Direita, 0);
  analogWrite(Motor2_Esquerda, velocidadeInicial);
  analogWrite(Motor2_Direita, 0);
  velocidadeAtual = velocidadeInicial;
}

void Parar() {
  analogWrite(Motor1_Esquerda, 0);
  analogWrite(Motor1_Direita, 0);
  analogWrite(Motor2_Esquerda, 0);
  analogWrite(Motor2_Direita, 0);
}

void MarchaRe() {
  analogWrite(Motor1_Esquerda, 0);
  analogWrite(Motor1_Direita, velocidadeInicial);
  analogWrite(Motor2_Esquerda, 0);
  analogWrite(Motor2_Direita, velocidadeInicial);
}

void Acelerar() {
  velocidadeAtual = velocidadeAtual + 20;
  analogWrite(Motor1_Esquerda, velocidadeAtual);
  analogWrite(Motor1_Direita, 0);
  analogWrite(Motor2_Esquerda, velocidadeAtual);
  analogWrite(Motor2_Direita, 0);

  if (velocidadeAtual > 255) {
    velocidadeInicial = 255;
  }
}

void Diminuir() {
  velocidadeAtual = velocidadeAtual - 20;
  analogWrite(Motor1_Esquerda, velocidadeAtual);
  analogWrite(Motor1_Direita, 0);
  analogWrite(Motor2_Esquerda, velocidadeAtual);
  analogWrite(Motor2_Direita, 0);

  if (velocidadeAtual < 0) {
    velocidadeAtual = 0;
  }
}

///void Inclinado()
//{
//  Serial.println("Carro na rampa");
 // int verificador = digitalRead(sensorPin);

//  int i = 0; 
 // bool verificadorDeVez = false;
  //while(verificador == LOW);
  //{
   // if (verificadorDeVez == false) 
    //{
     // for(velocidadeAtual = 50; i <= 5; i++)
      //{
       // velocidadeAtual += 10;
        //delay(500);
        //Serial.print("Velocidade Atual: ");
        //Serial.print(velocidadeAtual);
      //} 
       // verificadorDeVez = true;
    //} 
  //}
  //Reto();
//}
//void Reto()
//{
 // Serial.println("Carro reto");

  //int i = 0;

 // for(velocidadeAtual = 30; i <= 2; i--)
  //{
   // velocidadeAtual += 10;
    //delay(1000);
    //Serial.println("VelocidadeAtual: ");
    //Serial.print(velocidadeAtual);
  //}
//}

void ControleDeVelocidade() {
  long newCount = encoder.getCount();
  long delta = newCount - lastCount;

  if (delta != 0) {
    Serial.print("Pulsos: ");
    Serial.println(newCount);
    lastCount = newCount;
  }
}


void loop() {
  // int sensorPin = 5
  // int inclinado = digitalRead(sensorPin);

  // if (inclinado == LOW) 
  // {
  //   Inclinado();
  // } 
  ControleDeVelocidade();
  
  if (Serial.available() > 0) {
    char command = Serial.read();

    if (command == '1') {
      Iniciar();
    } else if (command == '2') {
      Parar();
    } else if (command == '3') {
      MarchaRe();
    } else if (command == '+') {
      Acelerar();
    } else if (command == '-') {
      Diminuir();
    }
  }
    if (ESP_BT.available()) {
    char receivedValue = ESP_BT.read();
    Serial.write(receivedValue);

        if (receivedValue == '1') {
      Iniciar();
    } else if (receivedValue == '2') {
      Parar();
    } else if (receivedValue == '3') {
      MarchaRe();
    } else if (receivedValue == '+') {
      Acelerar();
    } else if (receivedValue == '-') {
      Diminuir();
    }


    }
  //float distancia = ultrasonic.read();
  //Serial.println(distancia);
  
  //delay(100);
  //if (distancia < 50 && distancia> 0) {
    //Parar();
    //identificou = 1;
    //delay(3000);
  //} else if(identificou == 1 && distancia > 100){
    //  delay(3000);
      //Iniciar();
      //identificou = 0;
  //}

}
